{"version":3,"sources":["lib/withRequest.js","user/User.js","post/Post.js","home/Main.js","home/Captchaform.js","post/Formpost.js","upload/FileUpload.js","upload/Upload.js","auth/Registration.js","lib/Request.js","App.js","serviceWorker.js","index.js"],"names":["url","User","onChange","event","props","onNameChange","target","value","undefined","this","data","map","user","key","id","name","email","Component","Post","userId","title","body","withRequest","WrappedComponent","state","axios","get","result","setState","Main","Captchaform","captchaSettings","set","captchaEndpoint","postData","userEnteredCaptchaCode","captcha","getUserEnteredCaptchaCode","captchaId","getCaptchaId","self","formMessage","document","getElementById","post","then","response","success","setAttribute","innerHTML","reloadImage","history","push","catch","error","Error","preventDefault","method","onSubmit","onFormSubmitHandler","bind","captchaStyleName","ref","type","Formpost","changeHandler","e","console","log","submitHandler","status","FileUpload","selectedFile","handleInputChange","files","FormData","append","warn","res","className","onClick","submit","React","Upload","Registration","password","password_confirmation","registrationErrors","handleSubmit","handleChange","placeholder","required","Request","children","App","page","Nav","NavItem","NavLink","to","exact","path","component","Uploadfiles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2b446c49.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { render } from \"@testing-library/react\";\r\nimport axios from \"axios\";\r\n\r\n//higer order component\r\n\r\nexport default (url) => (WrappedComponent) =>\r\n  class extends Component {\r\n    state = {\r\n      data: [],\r\n    };\r\n\r\n    async componentDidMount() {\r\n      const result = await axios.get(url);\r\n      this.setState({ data: result.data });\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.state} {...this.props} />;\r\n    }\r\n  };\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport withRequest from \"../lib/withRequest\";\r\n\r\nclass User extends Component {\r\n  constructor() {\r\n    super();\r\n    //console.log(\"constructor\");\r\n  }\r\n\r\n  //   state = {\r\n  //     data: [],\r\n  //   };\r\n\r\n  //   async componentDidMount() {\r\n  //     //console.log(\"componentDidMount\");\r\n  //     const result = await axios.get(\r\n  //       \"https://jsonplaceholder.typicode.com/users\"\r\n  //     );\r\n  //     this.setState({ data: result.data });\r\n  //   }\r\n\r\n  onChange = (event) => {\r\n    //console.log(event.target.value);\r\n    this.props.onNameChange(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    // const { name } = this.props;\r\n\r\n    //console.log(\"render\");\r\n    return (\r\n      <div>\r\n        <div>{/* <input type=\"text\" onChange={this.onChange} /> */}</div>\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>ID</td>\r\n                <td>Name</td>\r\n                <td>Email</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.props.data === undefined ? (\r\n                <div />\r\n              ) : (\r\n                this.props.data.map((user) => (\r\n                  <tr key={user.id}>\r\n                    <td>{user.id}</td>\r\n                    <td>{user.name}</td>\r\n                    <td>{user.email}</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport withRequest from \"../lib/withRequest\";\r\n\r\nclass Post extends Component {\r\n  constructor() {\r\n    super();\r\n    //console.log(\"constructor\");\r\n  }\r\n\r\n  //   state = {\r\n  //     data: [],\r\n  //   };\r\n\r\n  //   async componentDidMount() {\r\n  //     const result = await axios.get(\r\n  //       \"https://jsonplaceholder.typicode.com/posts\"\r\n  //     );\r\n  //     this.setState({ data: result.data });\r\n  //   }\r\n\r\n  onChange = (event) => {\r\n    this.props.onNameChange(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    // const { name } = this.props;\r\n\r\n    //console.log(\"render\");\r\n    return (\r\n      <div>\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>User ID</td>\r\n                <td>Id</td>\r\n                <td>Title</td>\r\n                <td>Body</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.props.data.map((user) => (\r\n                <tr key={user.id}>\r\n                  <td>{user.userId}</td>\r\n                  <td>{user.id}</td>\r\n                  <td>{user.title}</td>\r\n                  <td>{user.body}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRequest(\"https://jsonplaceholder.typicode.com/posts\")(Post);\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Main extends Component {\r\n  render() {\r\n    return <div>Home Page</div>;\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { Captcha, captchaSettings } from 'reactjs-captcha';\r\n\r\nclass Captchaform extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // set the captchaEndpoint property to point to \r\n        // the captcha endpoint path on your app's backend\r\n        captchaSettings.set({\r\n            captchaEndpoint: 'ondev/captchaform'\r\n        });\r\n    }\r\n\r\n    // process the form on submit event\r\n    onFormSubmitHandler(event) {\r\n\r\n        // get the user-entered captcha code value to be validated at the backend side        \r\n        let userEnteredCaptchaCode = this.captcha.getUserEnteredCaptchaCode();\r\n      \r\n        // get the id of a captcha instance that the user tried to solve\r\n        let captchaId = this.captcha.getCaptchaId();\r\n\r\n        let postData = {\r\n            // add the user-entered captcha code value to the post data        \r\n            userEnteredCaptchaCode: userEnteredCaptchaCode,\r\n            // add the id of a captcha instance to the post data            \r\n            captchaId: captchaId\r\n        };\r\n\r\n        let self = this;\r\n        let formMessage = document.getElementById('form-messages');\r\n\r\n        // post the captcha data to the backend\r\n        axios.post('basic-captcha', postData)\r\n                .then(response => {\r\n                    if (response.data.success == false) {\r\n                        // captcha validation failed; show the error message\r\n                        formMessage.setAttribute('class', 'alert alert-error');\r\n                        formMessage.innerHTML = 'CAPTCHA validation failed.';\r\n                        // call the self.captcha.reloadImage()\r\n                        // in order to generate a new captcha challenge\r\n                        self.captcha.reloadImage();\r\n                    } else {\r\n                        // captcha validation succeeded; proceed with the workflow\r\n                        self.props.history.push('/basic-success-notify');\r\n                    }\r\n                }).catch(function (error) {\r\n                    throw new Error(error);\r\n                });\r\n\r\n        event.preventDefault();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <section id=\"main-content\">\r\n                <form id=\"basicForm\" method=\"POST\" onSubmit={this.onFormSubmitHandler.bind(this)}>\r\n                    <div id=\"form-messages\"></div>\r\n\r\n                    {/* captcha challenge: placeholder */}\r\n                    <Captcha captchaStyleName=\"reactBasicCaptcha\" ref={(captcha) => {this.captcha = captcha}} />\r\n\r\n                    <label>\r\n                        <span>Retype the characters from the picture:</span>\r\n                        {/* captcha code: user-input textbox */}\r\n                        <input \r\n                            type=\"text\"\r\n                            id=\"userCaptchaInput\"\r\n                        />\r\n                    </label>\r\n\r\n                    <button type=\"submit\" id=\"submitButton\">Validate</button>\r\n                </form>\r\n            </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default (Captchaform);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Formpost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      type: \"\",\r\n      status: \"\",\r\n    };\r\n  }\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    axios\r\n      .post(\"http://localhost/slimapi/products\", this.state)\r\n      //.post(\"http://150.95.25.237/slimapi/products\", this.state)\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  render() {\r\n    const { userId, title, body } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.submitHandler}>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={userId}\r\n              onChange={this.changeHandler}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              name=\"type\"\r\n              value={title}\r\n              onChange={this.changeHandler}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              name=\"status\"\r\n              value={body}\r\n              onChange={this.changeHandler}\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass FileUpload extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selectedFile: \"\",\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    this.setState({\r\n      selectedFile: event.target.files[0],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    const data = new FormData();\r\n    data.append(\"file\", this.state.selectedFile);\r\n    console.warn(this.state.selectedFile);\r\n    let url = \"upload-react/upload.php\";\r\n\r\n    axios\r\n      .post(url, data, {\r\n        // receive two parameter endpoint url ,form data\r\n      })\r\n      .then((res) => {\r\n        // then print response status\r\n        console.warn(res);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3\">\r\n            <br />\r\n            <br />\r\n\r\n            <h3 className=\"text-white\">React File Upload - Nicesnippets.com</h3>\r\n            <br />\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-6\">\r\n                <label className=\"text-white\">Select File :</label>\r\n                <input\r\n                  type=\"file\"\r\n                  className=\"form-control\"\r\n                  name=\"upload_file\"\r\n                  onChange={this.handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"col-md-6\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn btn-dark\"\r\n                  onClick={() => this.submit()}\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUpload;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport FileUpload from \"./FileUpload\";\r\n\r\nfunction Upload() {\r\n  return (\r\n    <div>\r\n      <FileUpload />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Upload;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Registration extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      password_confirmation: \"\",\r\n      registrationErrors: \"\",\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    axios.post(\"https://localhost:3001/registrations\");\r\n\r\n    // console.log(\"form sumitted\");\r\n    // event.preventDefault();\r\n  }\r\n\r\n  handleChange(event) {\r\n    //console.log(\"handle change\", event);\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"password_confirmation\"\r\n            placeholder=\"Password confirmation\"\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <button type=\"submit\">Register</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Request extends Component {\r\n  state = {\r\n    data: [],\r\n  };\r\n  async componentDidMount() {\r\n    const result = await axios.get(this.props.url);\r\n    this.setState({ data: result.data });\r\n  }\r\n\r\n  render() {\r\n    return this.props.children(this.state.data);\r\n  }\r\n}\r\n\r\nexport default Request;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport User from \"./user/User\";\nimport Post from \"./post/Post\";\nimport Main from \"./home/Main\";\nimport Captchaform from \"./home/Captchaform\";\nimport Formpost from \"./post/Formpost\";\nimport Uploadfiles from \"./upload/Upload\";\nimport Registration from \"./auth/Registration\";\nimport { Route, Link, Redirect } from \"react-router-dom\";\nimport Request from \"./lib/Request\";\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let page = true;\n\n    this.state = {\n      name: \"Flow Digital\",\n      page,\n    };\n  }\n\n  onNameChange = (name) => {\n    this.setState({ name: name });\n  };\n\n  render() {\n    const { page, name } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div>Hello {name}</div>\n        <div>\n          <p>List Based</p>\n          <Nav>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/\">Home</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/registration\">Registration</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/users\">Users</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/posts\">Posts</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/formpost\">Post to api</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/upload\">Upload files</Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link to=\"/captchaform\">Show reCaptcha</Link>\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <hr />\n        </div>\n        <Route exact path=\"/\">\n          {page ? <Redirect to=\"/main\" /> : <Main />}\n        </Route>\n        <Route path=\"/main\" component={Main} />\n        <Route path=\"/registration\" component={Registration} />\n        <Route\n          path=\"/users\"\n          component={() => (\n            <Request url=\"https://jsonplaceholder.typicode.com/users\">\n              {(data) => <User data={data} />}\n            </Request>\n          )}\n        />\n        <Route path=\"/posts\" component={Post} />\n        <Route path=\"/formpost\" component={Formpost} />\n        <Route path=\"/upload\" component={Uploadfiles} />\n        <Route path=\"/captchaform\" component={Captchaform} />\n\n        {/* <Route path=\"/users\" component={User}></Route>\n        <Route path=\"/posts\" component={Post}></Route> */}\n        {/* <User name={name} onNameChange={this.onNameChange} />\n        <Post /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}